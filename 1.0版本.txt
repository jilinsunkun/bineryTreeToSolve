updn_time = 1   #上下料时间
clear_time = 2  #清洗时间
onego_time = 4  #小车单位距离运动速度
work_time = 10   #加工时间

class Car():
    position = 1    #小车位置坐标
    clear_flag = 0  #是否有清洗任务等待去做，0为没有，1为有
    cnc_num = 0 #车上正在清洗的半熟料来自于哪个cnc
car = Car()  # 全局变量，只有一个小车
class CNC():
    number = 0  #CNC编号
    now_time = 0    #完成当前活动所需时间
    operation =  [1,0]  #即将要做的操作。oper[0]：全生上下料（0为不需要做，1为需要做）oper[1]:加工（同）oper[2]:半熟上下料
    time = 0    #从完成当前活动到小车完成自己任务（路程与清洗）的总时间
    leave_work_time = 0 #当小车处于operation == [0,1]状态时：距离完成加工工作所需时间
    been_used = 0 #是否已被使用(是为1，否为0)
    wait_num = 0    #已经加工出来半熟料后的等待轮数
    # cnc初始化:
    def Cnc_init(self,t_number):
        self.number  =   t_number
    # 返回完成当前cnc工作所需的时间:
    def get_time(self):
        self.time = 0
        #操作时间
        if self.operation == [1,0] :
            self.time = self.time + updn_time
        elif self.operation == [0,1] :
            self.time = self.time + self.leave_work_time
        if car.clear_flag == 1: #车里是否需要清洗操作
            self.time = self.time + clear_time
        self.time = self.time + ( ( self.number + 1 )/2-car.position )/onego_time #小车移动时间
        self.time = self.time - (1/144)*(self.wait_num)*work_time   #这里的数学公式还有待尝试、实验、修改
        return self.time
    # 强制该cnc做完即将做的工作，并且更新参数 :
    def do_and_update(self):    # 返回完成“他即将做完的工作”的时间
        if self.operation == [1,0] :
            print(self.number,"号CNC完成了操作：上下料，正在进行操作：加工生料|小车可能在进行： 半熟料加工")
            self.operation = [0,1]
            if self.been_used == 1:    #如果该cnc被使用过，则说明有半熟料的存在，应该放入车里准备清洗
                car.cnc_num = self.number
                car.clear_flag = 1  # 小车开始清洗半熟料
                self.wait_num = self.wait_num + 1
            return updn_time    #返回上下料时间
        elif self.operation == [0,1] :
            self.been_used = 1
            print(self.number,"号CNC完成了操作：加工生料，即将进行操作：上下料")
            self.operation = [1,0]
            zan1 = self.leave_work_time
            self.leave_work_time = work_time
            return zan1
        return  0
    # 更新该cnc的状态 :
    def cnc_update(self,t_time): #t_time表示已经过了多少时间
        if(self.operation == [0,1]):
            if t_time > self.leave_work_time and self.leave_work_time != work_time:  #如果过了t_time秒后cnc完成了自己的工作
                self.leave_work_time = work_time
                self.operation = [1, 0]
                print(self.number,"号哈哈哈CNC完成了操作：加工生料，即将进行操作：上下料")
            else :#如果过了t_time秒后cnc没完成自己的工作
                self.leave_work_time = self.leave_work_time - t_time

cnc = []    #八个cnc
priority = [0,1,2,3,4,5,6,7]    #cnc的优先级列表（值越小越有限）
for i in range(8):  #创建空间
    cnc.append(CNC())
    cnc[i].Cnc_init(i+1)  #cnc初始化

def mypriority():   #更新priority(cnc的优先级列表)
    #---现在开始计时 :
    t_time = 0
    # 以下为更新小车的清洗状态
    if car.clear_flag == 1 :
        t_time = t_time + clear_time    # 清洗需要花费时间
        print("之前来自于",car.cnc_num,"号CNC的半熟料已经清洗完毕")
        cnc[car.cnc_num].wait_num = 0   #清零
        car.cnc_num = 0 #清零
        car.clear_flag = 0
    # 以下为更新小车的位置（让小车移动到优先级最高的cnc面前）
    t_time = t_time + abs( car.position - ( cnc[priority[0]].number + 1 )//2 )/onego_time # 小车移动需要花费时间
    car.position = ( cnc[priority[0]].number + 1 )//2
    # 以下为让优先级最高的cnc进行他应该做的操作
    print("当前priority为：",priority)
    t_time = t_time + cnc[priority[0]].do_and_update()
    #---计时结束
    # 以下为更新8个cnc的时间
    for i in range(0,8):
        cnc[i].cnc_update(t_time)
        cnc[i].get_time()
    #考虑到未被使用的cnc优先级应该提高:
        #先保存
    # 以下为对priority排序
    li = []
    for i in range(8):
        li.append(cnc[i].time)
    li.sort()  # 排好序的8个 cnc总时间 的列表
    sort_set = {1000}
    for i in range(0, 8):
        for j in range(0, 8):
            if (j in sort_set):
                continue
            if li[i] == cnc[j].time:
                priority[i] = j
                sort_set.add(j)
                break
    print(priority)

for i in range(100):
    mypriority()